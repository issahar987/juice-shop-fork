pipeline {
    agent any

    triggers {
        // Trigger the pipeline on every push to the repository
        githubPush()
    }

    environment {
        REMOTE_HOST = '35.233.110.153'
        REMOTE_USER = 'jenkins'
        REMOTE_PATH = '/home/jenkins/juice-shop-fork'
        SSH_CREDENTIALS_ID = 'ssh-key-to-remote-server'
    }

    stages {
        stage('Trigger Cypress Tests Job') {
            steps {
                script {
                    def downstreamBuild = build job: 'Cypress tests', wait: true

                    catchError(buildResult: 'FAILURE') {
                        if (downstreamBuild.resultIsBetterOrEqualTo('FAILURE')) {
                            error 'Cypress tests job failed. Stopping the pipeline.'
                        }
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                // Checkout your source code repository (assuming it contains the Juice Shop code)
                git 'https://github.com/issahar987/juice-shop-fork'
            }
        }
        
        stage('Deploy to Remote Server') {
            steps {
                // Deploy Juice Shop to remote server
                script {
                    // The credentialsId is the ID of the SSH credentials you configured in Jenkins
                    node('webapp-agent') {
                        dir("${REMOTE_PATH}") {
                             sh 'git pull'
                         }
                    }
                }
            }
        }

        stage('Build docker') {
             steps {
                 script {
                     node('webapp-agent') {
        //                 env.PATH = "/home/jenkins/.nvm/versions/node/v20.11.0/bin:${env.PATH}"
                         dir("${REMOTE_PATH}") {
                             sh 'docker build -t juice-shop:latest -f Dockerfile .'
                         }
                       
                     }
                 }
             }
        }

        stage('Run docker') {
                     steps {
                         script {
                             node('webapp-agent') {
        //                 env.PATH = "/home/jenkins/.nvm/versions/node/v20.11.0/bin:${env.PATH}"
                                 dir("${REMOTE_PATH}") {
                                     sh 'docker run -d -p 3000:3000 juice-shop:latest'
                                 }
                               
                            }
                    }
                }
        }

        stage('Trigger Nikto Job') {
            steps {
                script {
                    def downstreamBuild = build job: 'Nikto', wait: true

                    catchError(buildResult: 'FAILURE') {
                        if (downstreamBuild.resultIsBetterOrEqualTo('FAILURE')) {
                            error 'Nikto job failed. Stopping the pipeline.'
                        }
                    }
                }
            }
        }
        
        // stage('Build Docker Image on Remote Server') {
        //     steps {
        //         script {
        //             sshagent(credentials: [SSH_CREDENTIALS_ID]) {
        //                 sh "ssh ${REMOTE_USER}@${REMOTE_HOST} 'docker build -t ${DOCKER_IMAGE_NAME} -f ${REMOTE_PATH}/Dockerfile ${REMOTE_PATH}'"
        //             }
        //         }
        //     }
        // }
        
    }
}
