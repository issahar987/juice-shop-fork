pipeline {
    agent any

    triggers {
        // Trigger the pipeline on every push to the repository
        githubPush()
    }

    environment {
        REMOTE_HOST = '35.233.110.153'
        REMOTE_USER = 'jenkins'
        REMOTE_PATH = '/home/jenkins/juice-shop-fork'
        SSH_CREDENTIALS_ID = 'ssh-key-to-remote-server'
    }

    stages {

        stage('Trigger Cypress Tests Job') {
            steps {
                script {
                    def cypressJob = build job: 'Cypress tests', wait: true
        
                    if (cypressJob.getResult() == 'FAILURE') {
                        error 'Cypress Tests job failed. Stopping the pipeline.'
                    } else {
                    echo "cypressJob succeeded."
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                // Checkout your source code repository (assuming it contains the Juice Shop code)
                git 'https://github.com/issahar987/juice-shop-fork'
            }
        }
        
        stage('Deploy to Remote Server') {
            steps {
                // Deploy Juice Shop to remote server
                script {
                    // The credentialsId is the ID of the SSH credentials you configured in Jenkins
                    node('webapp-agent') {
                        dir("${REMOTE_PATH}") {
                             sh 'git pull'
                         }
                    }
                }
            }
        }

        stage('Build docker') {
             steps {
                 script {
                     node('webapp-agent') {
                         env.PATH = "/home/jenkins/.nvm/versions/node/v20.11.0/bin:${env.PATH}"
                         dir("${REMOTE_PATH}") {
                             sh 'docker build -t juice-shop-fork:latest -f Dockerfile .'
                         }
                       
                     }
                 }
             }
        }

        stage('Check and Remove Container') {
            steps {
                node('webapp-agent') {
                    script {
                        def CONTAINER_ID = sh returnStdout: true, script: 'docker ps -a | grep 3000 | awk \'{print $1}\''
    
                        if (CONTAINER_ID) {
                            echo "Identyfikator kontenera na porcie 3000: ${CONTAINER_ID}"
    
                            // Tutaj możesz dodać dodatkowe kroki, np. zatrzymać i usunąć kontener:
                            sh "docker stop ${CONTAINER_ID}"
                            sh "docker rm ${CONTAINER_ID}"
                        } else {
                            echo "Nie znaleziono kontenera na porcie 3000."
                        }
                    }
                }
            }
        }

        stage('Run docker') {
                     steps {
                         script {
                             node('webapp-agent') {
                                 dir("${REMOTE_PATH}") {
                                     sh 'docker run -d -p 3000:3000 juice-shop-fork:latest'
                                 }
                               
                            }
                    }
                }
        }

        stage('Trigger Nikto Job') {
            steps {
                script {
                    def nikto_job = build job: 'Nikto', wait: true
                    if (nikto_job.getResult() == 'FAILURE') {
                        error 'Nikto job failed. Stopping the pipeline.'
                    } else {
                echo "Nikto job succeeded."
                }
            }
        }
        }
        
    }
}
